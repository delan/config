diff --git a/module/zfs/dsl_scan.c b/module/zfs/dsl_scan.c
index 1409db9e4..13d73ffa6 100644
--- a/module/zfs/dsl_scan.c
+++ b/module/zfs/dsl_scan.c
@@ -2733,6 +2733,17 @@ enqueue_clones_cb(dsl_pool_t *dp, dsl_dataset_t *hds, void *arg)
 	return (0);
 }
 
+static boolean_t
+dsname_starts_with(const char *dsname, const char *prefix) {
+	if (!strcmp(dsname, prefix)) return B_TRUE;
+	size_t dsname_len = strlen(dsname);
+	size_t prefix_len = strlen(prefix);
+	if (dsname_len <= prefix_len) return B_FALSE;
+	if (!!strncmp(dsname, prefix, prefix_len)) return B_FALSE;
+	if (dsname[prefix_len] == '@' || dsname[prefix_len] == '/') return B_TRUE;
+	return B_FALSE;
+}
+
 static void
 dsl_scan_visitds(dsl_scan_t *scn, uint64_t dsobj, dmu_tx_t *tx)
 {
@@ -2741,6 +2752,23 @@ dsl_scan_visitds(dsl_scan_t *scn, uint64_t dsobj, dmu_tx_t *tx)
 
 	VERIFY3U(0, ==, dsl_dataset_hold_obj(dp, dsobj, FTAG, &ds));
 
+	boolean_t is_target_or_descendant = B_FALSE;
+	boolean_t is_potential_ancestor = B_FALSE;
+	char *dsname_ = kmem_alloc(ZFS_MAX_DATASET_NAME_LEN, KM_SLEEP);
+	dsl_dataset_name(ds, dsname_);
+	if (dsname_starts_with(dsname_, "ocean/dump/venus/root")) {
+		is_target_or_descendant = B_TRUE;
+		zfs_dbgmsg(">>> dataset %llu (%s)", (longlong_t)dsobj, dsname_);
+	} else if (dsname_starts_with(dsname_, "ocean/dump/venus")
+		|| dsname_starts_with(dsname_, "ocean/dump")
+		|| dsname_starts_with(dsname_, "ocean")) {
+		is_potential_ancestor = B_TRUE;
+		zfs_dbgmsg("??? dataset %llu (%s)", (longlong_t)dsobj, dsname_);
+	} else {
+		zfs_dbgmsg("--- dataset %llu (%s)", (longlong_t)dsobj, dsname_);
+	}
+	kmem_free(dsname_, ZFS_MAX_DATASET_NAME_LEN);
+
 	if (scn->scn_phys.scn_cur_min_txg >=
 	    scn->scn_phys.scn_max_txg) {
 		/*
@@ -2803,10 +2831,16 @@ dsl_scan_visitds(dsl_scan_t *scn, uint64_t dsobj, dmu_tx_t *tx)
 	/*
 	 * Iterate over the bps in this ds.
 	 */
-	dmu_buf_will_dirty(ds->ds_dbuf, tx);
-	rrw_enter(&ds->ds_bp_rwlock, RW_READER, FTAG);
-	dsl_scan_visit_rootbp(scn, ds, &dsl_dataset_phys(ds)->ds_bp, tx);
-	rrw_exit(&ds->ds_bp_rwlock, FTAG);
+	if (is_target_or_descendant) {
+		dmu_buf_will_dirty(ds->ds_dbuf, tx);
+		rrw_enter(&ds->ds_bp_rwlock, RW_READER, FTAG);
+		dsl_scan_visit_rootbp(scn, ds, &dsl_dataset_phys(ds)->ds_bp, tx);
+		rrw_exit(&ds->ds_bp_rwlock, FTAG);
+	} else if (is_potential_ancestor) {
+		goto potential_ancestor;
+	} else {
+		goto out;
+	}
 
 	char *dsname = kmem_alloc(ZFS_MAX_DATASET_NAME_LEN, KM_SLEEP);
 	dsl_dataset_name(ds, dsname);
@@ -2840,6 +2874,7 @@ dsl_scan_visitds(dsl_scan_t *scn, uint64_t dsobj, dmu_tx_t *tx)
 	/*
 	 * Add descendant datasets to work queue.
 	 */
+potential_ancestor:
 	if (dsl_dataset_phys(ds)->ds_next_snap_obj != 0) {
 		scan_ds_queue_insert(scn,
 		    dsl_dataset_phys(ds)->ds_next_snap_obj,
